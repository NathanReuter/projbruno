yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
MCVector <<- c(MCVector, localMC);
SDVector <<- c(SDVector, localSD);
FCVector <<- c(FCVector, localFC);
}
});
resultList = normalizedRowNumbers(list(MCVector, SDVector, FCVector), length(CodeVector));
resultFrame = data.frame(
"Codigo" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Management Council" = resultList[[1]],
"Statutory Directors" = resultList[[2]],
"Fiscal Council" = resultList[[3]]
);
return(resultFrame);
}
# P3 - Porcentagem de conselheiros independentes
p3 <- function(dataInfo) {
#TODO CHECK FOR ODER PROBLEM IN YEAR
# Get code.type  == 27 in history.board.composition and divide by all ocurrences in the year
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
MandateVector = vector();
by(dataInfo, 1:nrow(dataInfo), function(company) {
hBoardComposition = company['history.board.composition'];
hBoardComposition = hBoardComposition$history.board.composition[[1]];
if (!is.null(hBoardComposition)) {
hBoardComposition = filter(hBoardComposition, code.type.job == 27)
if (nrow(hBoardComposition) > 0) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
cName = hBoardComposition[[1, 1]];
localMandatesVector = vector();
auxmandatesVector = vector();
for (index in seq_along(hBoardComposition$ref.date)) {
parsedYear = parseDate(hBoardComposition$ref.date[index]);
if (!(parsedYear %in% localYearVector)) {
localYearVector <- c(localYearVector, parsedYear);
localCompany <- c(localCompany, cName);
localCode <- c(localCode, getCompanyCode(cName));
localMandatesVector <- c(localMandatesVector, mean(auxmandatesVector));
auxmandatesVector <- vector();
}
mandates = hBoardComposition$qtd.consecutive.mandates[index];
if (!is.na(mandates)) {
auxmandatesVector <- c(auxmandatesVector, mandates)
}
}
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
MandateVector <<- c(MandateVector, localMandatesVector);
}
}
});
resultFrame = data.frame(
"Codigo" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Porcentagem Conselheiros" = MandateVector
);
return (resultFrame);
}
#sellingPorcentageResultaData <-sellingPorcentage(df.statements)
# This writes into csv
#write.csv(sellingPorcentageResultaData, file = "./Planilha 1.csv")
#p4
# Usar a 7 para saber quem são os CEO e verficar as pessoas fiísicas em history.stockholders, pegar todos menos o CEO.
# Depois pegar todas s pessoas fisicas e comparar quem faz parte do conselho em history.board.composition
# e somar as ações dessas pessoas
p4 <- function(dataInfo, plan7) {
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
OrderShareVector = vector();
by(dataInfo, 1:nrow(dataInfo), function(company) {
hStockHolders = company$history.stockholders[[1]];
if (!is.null(hStockHolders)) {
hStockHolders = filter(hStockHolders, type.stockholder == "Fisica");
ceoInConsulList = filter(planilha7, Companhia == hStockHolders$name.company[1]);
if (nrow(ceoInConsulList) > 0 && nrow(hStockHolders) > 0) {
hStockHolders = filter(hStockHolders, !hStockHolders$name.stockholder %in% ceoInConsulList$Diretor);
}
if (nrow(hStockHolders) > 0) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
localDirector = vector();
localOrderShare = vector();
cName = hStockHolders[[1, 1]];
oldYear = 0;
sumVector = vector();
# TODO REMOVE CEO
for (index in 1:nrow(hStockHolders)) {
sumVector <- c(sumVector, as.numeric(hStockHolders$qtd.ord.shares[index]));
actualYear = parseDate(hStockHolders$ref.date[index])
if (oldYear != actualYear) {
localOrderShare <- c(localOrderShare, sum(sumVector));
sumVector <- vector();
localYearVector <- c(localYearVector, actualYear);
localCompany <- c(localCompany, cName);
localCode <- c(localCode, getCompanyCode(cName));
}
oldYear = actualYear;
}
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
OrderShareVector <<- c(OrderShareVector, localOrderShare);
}
}
});
resultFrame = data.frame(
"Codigo" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"APC" = OrderShareVector
);
return(resultFrame);
}
# p5 Remuneração Média (RM)
# pegar no history.compensation e dividir total.value / qtd.members
p5 <- function(dataInfo) {
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
AverageRemunaration = vector();
by(dataInfo, 1:nrow(dataInfo), function(company) {
hComp = company['history.compensation'];
hComp = hComp$history.compensation[[1]];
if (length(hComp) > 0) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
localAR = vector();
localAuxAR = vector();
cName = hComp[[1, 1]];
for (index in seq_along(hComp$ref.date)) {
parsedYear = parseDate(hComp$ref.date[index]);
if (!(parsedYear %in% localYearVector)) {
if (index != 1) {
localAR <- c(localAR, sum(localAuxAR));
localAuxAR <- vector();
}
localYearVector <- c(localYearVector, parsedYear);
localCompany <- c(localCompany, cName);
localCode <- c(localCode, getCompanyCode(cName));
}
average = hComp$total.value.remuneration[index]/ hComp$qtd.members[index];
if (is.nan(average)) {
average = 0;
}
localAuxAR <- c(localAuxAR, average);
}
localAR <- c(localAR, sum(localAuxAR));
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
AverageRemunaration <<- c(AverageRemunaration, localAR);
}
});
resultFrame = data.frame(
"Codigo" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Remuneração Média" = AverageRemunaration
);
View(resultFrame)
return(resultFrame);
}
# p6 Ranking da Remuneração Média (RRM)
# Fazer Global, para todas as empresas e rankear entre 0-1 o as empresas de acrodo com a remuneração média
p6 <- function(plan5) {
sortedPlan = plan5[order(-plan5$Remuneração.Média),];
index = 1;
years = c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017);
RMRankitVector = vector();
RRMVector = vector();
for (year in years) {
inYearComp = filter(sortedPlan, sortedPlan$Ano == year);
total = nrow(inYearComp);
for (index in 1:total) {
RMRankit = total - index + 1;
RMRankitVector <- c(RMRankitVector, RMRankit);
RMM = round((RMRankit - 1)/(total -1), 2);
RRMVector <- c(RRMVector, RMM);
}
}
View(RMRankitVector);
sortedPlan["RMRankit"] = RMRankitVector;
sortedPlan["RMM"] = RRMVector;
resultFrame = sortedPlan[order(-sortedPlan$Remuneração.Média),];
View(resultFrame);
return (resultFrame);
}
# p7 Nível percentual de ações em posse dos executivos
# Vasculhar history responsable e pegar os person.name com person.job == "Diretor Presidente"
# Depois usar o person.name e em history.stockholders, verificar se person.name == name.stockholder
# e captura o perc.ord.shares
p7 <- function(dataInfo) {
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
DirectorVector = vector();
OrderShareVector = vector();
by(dataInfo, 1:nrow(dataInfo), function(company) {
hResp = company['history.responsible.docs']$history.responsible.docs[[1]];
if (!is.null(hResp)) {
hResp = filter(hResp, person.job %in% c("Diretor Presidente", "Diretor Presidente/Relações com Investidores"));
hStockHolders = company$history.stockholders[[1]];
if (nrow(hResp) > 0 && nrow(hStockHolders) > 0 ) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
localDirector = vector();
localOrderShare = vector();
cName = hResp[[1, 1]];
for (name in hResp$person.name) {
result = filter(hStockHolders, name.stockholder == name);
#TODO CHECK FOR MORE DE UM RESULT AND CHECK FOR NULL BEFORE FILTER
if (nrow(result) > 0) {
for (index in 1:nrow(result)) {
localDirector <- c(localDirector, name);
localYearVector <- c(localYearVector, parseDate(result$ref.date[index]));
localCompany <- c(localCompany, cName);
localOrderShare <- c(localOrderShare, result$perc.ord.shares[index]);
localCode <- c(localCode, getCompanyCode(cName));
}
}
}
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
DirectorVector <<- c(DirectorVector, localDirector);
OrderShareVector <<- c(OrderShareVector, localOrderShare);
}
}
});
resultFrame = data.frame(
"Codigo" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Diretor" = DirectorVector,
"Percentual de Ações" = OrderShareVector
);
return(resultFrame);
}
# p8 Dummy 1 - CEO presidente do conselho; 0 - Caso contrário
# Varrer history.board.composition, e para cada ano se tiver cõdigo 30 dummy = 1 se nao 0
p8 <- function(dataInfo) {
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
DummyVector = vector();
by(dataInfo, 1:nrow(dataInfo), function(company) {
hBC = company$history.board.composition[[1]];
if (!is.null(hBC) && nrow(hBC) > 0) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
localDummyVector = vector();
cName = hBC[[1, 1]];
for (index in seq_along(hBC$ref.date)) {
parsedYear = parseDate(hBC$ref.date[index])
if (!(parsedYear %in% localYearVector)) {
localYearVector <- c(localYearVector, parsedYear);
localCompany <- c(localCompany, cName);
localCode <- c(localCode, getCompanyCode(cName));
result = filter(hBC, ref.date == ref.date[index],code.type.job == 30);
if (nrow(result) > 0) {
localDummyVector <- c(localDummyVector, 1);
} else {
localDummyVector <- c(localDummyVector, 0);
}
}
}
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
DummyVector <<- c(DummyVector, localDummyVector);
}
});
resultFrame = data.frame(
"Código" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Dummy" = DummyVector
);
return(resultFrame);
}
# p9 Tempo de mandato em anos do CEO na empresa
# Olhar history.responsible , verificar todos os person.job = "Diretor Presidente"
# Varrer os anos de 2010 e contar quantos anos de mandato
# Ano         Diretor:             Tempo:
# 2012        ----                  1
# 2011        Marcos Antonio Molina dos Santos    2
# 2010        Marcos Antonio Molina dos Santos    2
p9 <- function(dataInfo) {
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
DirectorVector = vector();
MandateTimeVector = vector();
by(dataInfo, 1:nrow(dataInfo), function(company) {
hResp = company['history.responsible.docs']$history.responsible.docs[[1]];
if (!is.null(hResp)) {
hResp = filter(hResp, person.job %in% c("Diretor Presidente", "Diretor Presidente/Relações com Investidores"));
if (nrow(hResp) > 0) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
localDirector = vector();
localMandateTime = vector();
cName = hResp[[1, 1]];
actualDirectorName = "";
yearsCounter = 0;
for (index in 1:nrow(hResp)) {
if (!is.null(hResp$person.name[index]) && !is.na(hResp$person.name[index])) {
if (actualDirectorName == "" || actualDirectorName == hResp$person.name[index]) {
yearsCounter = yearsCounter + 1;
} else {
localMandateTime <- c(localMandateTime, rep(c(yearsCounter), yearsCounter));
yearsCounter = 1;
}
actualDirectorName = hResp$person.name[index];
localDirector <- c(localDirector, hResp$person.name[index]);
localYearVector <- c(localYearVector, parseDate(hResp$ref.date[index]));
localCompany <- c(localCompany, cName);
localMandateTime <- c(localMandateTime, hResp$perc.ord.shares[index]);
localCode <- c(localCode, getCompanyCode(cName));
}
}
localMandateTime <- c(localMandateTime, rep(c(yearsCounter), yearsCounter));
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
DirectorVector <<- c(DirectorVector, localDirector);
MandateTimeVector <<- c(MandateTimeVector, localMandateTime);
}
}
});
resultFrame = data.frame(
"Codigo" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Diretor" = DirectorVector,
"Tempo de Mandato (Anos)" = MandateTimeVector
);
View(resultFrame);
return(resultFrame);
}
# p10 Logaritmo natural do total de ativos de uma empresa
# Pegar a planilha Bruno.xls
# Color no formato codigo, nome, e pegar o valor de total de ativos e aplica Ln em todos os anos(COlunas)
p10 <- function(dataInfo) {
codeVector = vector();
companyVector = vector();
activeValueVector = vector();
yearVector = vector();
yearCounter <- 2009;
j <- 0;
for (colSheet in  brunoSheet[5: length(brunoSheet)]) {
j = j + length(companyVector)
yearCounter = yearCounter + 1;
i = 0;
k = 3
for (activeValue in colSheet[k + 1: length(colSheet)]) {
i = i + 1;
cName = unlist(brunoSheet[k + i, 2]);
aValue = as.numeric(unlist(activeValue));
codeVector[i + j] = getCompanyCode(cName);
companyVector[i + j] = cName;
yearVector[i + j] = yearCounter;
activeValueVector[i + j] = log(aValue);
}
}
resultFrame = data.frame("Código" = codeVector, "Companhia" = companyVector, "Ano" = yearVector, 'Valor Ativo' = activeValueVector);
View(resultFrame)
return (resultFrame)
}
# p11 Dummy 1 - Novo Mercado ou Nível 2; 0 - Caso contrário
# history.gorvernance.listings
# listed.segment = "Novo Mercado" || "Nivel 2"
# Lista por ano e empresa
p11 <- function(dataInfo) {
yearVector = vector();
CompanyVector = vector();
CodeVector = vector();
DummyVector = vector();
searchTarget = c("Novo Mercado", "Nivel 2");
by(dataInfo, 1:nrow(dataInfo), function(company) {
hGL = company$history.governance.listings[[1]];
if (!is.null(hGL) && nrow(hGL) > 0) {
localYearVector  = vector();
localCompany = vector();
localCode = vector();
localDummyVector = vector();
cName = hGL[[1, 1]];
for (index in seq_along(hGL$ref.date)) {
parsedYear = parseDate(hGL$ref.date[index])
if (!(parsedYear %in% localYearVector)) {
localYearVector <- c(localYearVector, parsedYear);
localCompany <- c(localCompany, cName);
localCode <- c(localCode, getCompanyCode(cName));
result = filter(hGL, ref.date == ref.date[index],listed.segment %in% searchTarget);
if (nrow(result) > 0) {
localDummyVector <- c(localDummyVector, 1);
} else {
localDummyVector <- c(localDummyVector, 0);
}
}
}
yearVector <<- c(yearVector, localYearVector);
CompanyVector <<- c(CompanyVector, localCompany);
CodeVector <<- c(CodeVector, localCode);
DummyVector <<- c(DummyVector, localDummyVector);
}
});
resultFrame = data.frame(
"Código" = CodeVector,
"Companhia" = CompanyVector,
"Ano" = yearVector,
"Dummy" = DummyVector
);
return(resultFrame);
}
# p12 Dummy 1 - Setor que será observado; 0 - Caso contrário
# Separa pela planilha bruno.xls código, nomeCOmpania e nomesetor
p12 <- function(dataInfo) {
#TODO
codeVector = vector();
companyVector = vector();
activeValueVector = vector();
yearVector = vector();
yearCounter <- 2009;
j <- 0;
for (colSheet in  brunoSheet[5: length(brunoSheet)]) {
j = j + length(companyVector)
yearCounter = yearCounter + 1;
i = 0;
k = 3
for (activeValue in colSheet[k + 1: length(colSheet)]) {
i = i + 1;
cName = unlist(brunoSheet[k + i, 2]);
aValue = as.numeric(unlist(activeValue));
codeVector[i + j] = getCompanyCode(cName);
companyVector[i + j] = cName;
yearVector[i + j] = yearCounter;
activeValueVector[i + j] = log(aValue);
}
}
resultFrame = data.frame("Código" = codeVector, "Companhia" = companyVector, "Ano" = yearVector, 'Valor Ativo' = activeValueVector);
View(resultFrame)
return (resultFrame)
}
debugSource('~/projects/projetoBruno/progFiles/main.R')
debugSource('~/projects/projetoBruno/progFiles/main.R')
debugSource('~/projects/projetoBruno/progFiles/main.R')
typeof(name)
filter(codeAndName, grepl(name, company.name))
filter(codeAndName, grepl(name, company.name))
codeAndName
filter(codeAndName, grepl("cyrela", company.name))
View(codeAndName)
filter(codeAndName, grepl("cyrela", company.name),)
filter(codeAndName, grepl("cyrela", company.name))
codeAndName$company.name
filter(codeAndName, grepl("cyrela", codeAndName$company.name))
filter(codeAndName, grepl("CYRELA", codeAndName$company.name))
filter(codeAndName, grepl("CYRELA", codeAndName$company.name, ignore.case=TRUE))
filter(codeAndName, grepl("cyrela", codeAndName$company.name, ignore.case=TRUE))
debugSource('~/projects/projetoBruno/progFiles/main.R')
code
(filter(codeAndName, grepl(name, company.name, ignore.case=TRUE))
filter(codeAndName, grepl(name, company.name, ignore.case=TRUE))
filter(codeAndName, grepl(name, company.name, ignore.case=TRUE))[1]
filter(codeAndName, grepl(name, company.name, ignore.case=TRUE))[[1]]
filter(codeAndName, grepl(name, company.name, ignore.case=TRUE))[[1, 1]]
debugSource('~/projects/projetoBruno/progFiles/main.R')
typeof(code)
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
debugSource('~/projects/projetoBruno/progFiles/main.R')
debugSource('~/projects/projetoBruno/progFiles/main.R')
View(code)
nrow(code)
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
View(planilha1)
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
source('~/projects/projetoBruno/progFiles/main.R')
